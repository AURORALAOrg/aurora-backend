generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum QuestionType {
  MULTIPLE_CHOICE    @map("multiple_choice")
  SENTENCE_BUILDER   @map("sentence_builder")
  FILL_IN_BLANKS     @map("fill_in_blanks")
  IDIOM_CHALLENGE    @map("idiom_challenge")
}

enum DifficultyLevel {
  BEGINNER     @map("beginner")
  INTERMEDIATE @map("intermediate")
  ADVANCED     @map("advanced")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  isEmailVerified  Boolean @default(false)
  firstName      String?
  lastName       String?
  phoneNumber    String?
  profileImage   String?
  status        Status     @default(INACTIVE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  totalXP        Int            @default(0) @map("total_xp")
  dailyXP        Int            @default(0) @map("daily_xp")
  weeklyXP       Int            @default(0) @map("weekly_xp")
  currentStreak  Int            @default(0) @map("current_streak")
  longestStreak  Int            @default(0) @map("longest_streak")
  lastStreakDate  DateTime?
  lastActivityAt  DateTime?
  wallet         Wallet?
  questions      Question[]
  activities      UserActivity[]
}

model UserActivity {
  id                 String    @id @default(uuid())
  userId             String    @map("user_id")
  activityDate       DateTime
  xpEarned           Int
  questionsCompleted Int
  createdAt         DateTime  @default(now())
  user               User     @relation(fields: [userId], references: [id])

  @@map("user_activities")
  @@unique([userId, activityDate], name: "userId_activityDate")
}

model Wallet {
  id            String   @id @default(uuid())
  userId        String   @unique
  walletAddress String   @unique
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(INACTIVE)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletVerificationChallenge {
  id            String    @id @default(uuid())
  walletAddress String    @unique
  message       String
  nonce         String
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
}

model Question {
  id            String   @id @default(uuid())
  content       Json     // Will contain question-specific content
  metadata      Json     // Will contain type and other metadata
  gameMetadata  Json     // Will contain game-specific metadata
  createdBy     String
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdByUser User     @relation(fields: [createdBy], references: [id])

  @@map("questions")
}