generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum QuestionType {
  MULTIPLE_CHOICE    @map("multiple_choice")
  SENTENCE_BUILDER   @map("sentence_builder")
  FILL_IN_BLANKS     @map("fill_in_blanks")
  IDIOM_CHALLENGE    @map("idiom_challenge")
}

enum DifficultyLevel {
  BEGINNER     @map("beginner")
  INTERMEDIATE @map("intermediate")
  ADVANCED     @map("advanced")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  isEmailVerified  Boolean @default(false)
  firstName      String?
  lastName       String?
  phoneNumber    String?
  profileImage   String?
  status        Status     @default(INACTIVE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  wallet         Wallet?
  questions      Question[]
}

model Wallet {
  id            String   @id @default(uuid())
  userId        String   @unique
  walletAddress String   @unique
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(INACTIVE)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletVerificationChallenge {
  id            String    @id @default(uuid())
  walletAddress String    @unique
  message       String
  nonce         String
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
}

model Question {
  id            String   @id @default(uuid())
  content       Json     // Will contain question-specific content
  metadata      Json     // Will contain type and other metadata
  gameMetadata  Json     // Will contain game-specific metadata
  createdBy     String
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdByUser User     @relation(fields: [createdBy], references: [id])

  @@map("questions")
}

model Achievement {
  id               String   @id @default(uuid())
  name             String
  description      String
  category         String
  requirementType  String
  requirementValue Int
  xpBonus          Int      @default(0)
  badgeUrl         String?
  rarity           String   @default("common")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  userAchievements UserAchievement[]
}

model UserAchievement {
  id             String     @id @default(uuid())
  userId         String
  achievementId  String
  earnedAt       DateTime   @default(now())
  progressValue  Int        @default(0)
  isNotified     Boolean    @default(false)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement    Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@unique([userId, achievementId])
}