generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum QuestionType {
  MULTIPLE_CHOICE  @map("multiple_choice")
  SENTENCE_BUILDER @map("sentence_builder")
  FILL_IN_BLANKS   @map("fill_in_blanks")
  IDIOM_CHALLENGE  @map("idiom_challenge")
}

enum DifficultyLevel {
  BEGINNER     @map("beginner")
  INTERMEDIATE @map("intermediate")
  ADVANCED     @map("advanced")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  isEmailVerified Boolean        @default(false)
  firstName       String?
  lastName        String?
  phoneNumber     String?
  profileImage    String?
  status          Status         @default(INACTIVE)
  role            String         @default("user")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  totalXP         Int            @default(0) @map("total_xp")
  dailyXP         Int            @default(0) @map("daily_xp")
  weeklyXP        Int            @default(0) @map("weekly_xp")
  currentStreak   Int            @default(0) @map("current_streak")
  longestStreak   Int            @default(0) @map("longest_streak")
  lastStreakDate  DateTime?      @map("last_streak_date")
  lastActivityAt  DateTime?      @map("last_activity_at")
  wallet          Wallet?
  questions       Question[]
  activities      UserActivity[]

  @@index([lastActivityAt], name: "idx_user_last_activity_at")
  @@index([lastStreakDate], name: "idx_user_last_streak_date")
  @@index([totalXP], name: "idx_user_total_xp")
  @@index([currentStreak], name: "idx_user_current_streak")
}

model UserActivity {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  activityDate       DateTime
  xpEarned           Int
  questionsCompleted Int
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id])

  @@unique([userId, activityDate], name: "userId_activityDate")
  @@map("user_activities")
}

model Wallet {
  id            String   @id @default(uuid())
  userId        String   @unique
  walletAddress String   @unique
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(INACTIVE)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletVerificationChallenge {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  message       String
  nonce         String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
}

model Question {
  id            String   @id @default(uuid())
  content       Json
  metadata      Json
  gameMetadata  Json
  createdBy     String
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdByUser User     @relation(fields: [createdBy], references: [id])

  @@map("questions")
}

/// Conversation topics for AI practice, linked conceptually to question categories/levels
model Topic {
  id           String       @id @default(uuid())
  name         String
  description  String?
  category     Category
  englishLevel EnglishLevel
  prompts      String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

                  @@unique([name, category, englishLevel], map: "topic_unique_name_category_level")
  @@index([englishLevel, category], map: "topic_level_category_idx")
  @@index([englishLevel], map: "topic_level_idx")
  @@index([category], map: "topic_category_idx")
}

enum EnglishLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum Category {
  GRAMMAR
  VOCABULARY
  DAILY_LIFE
  TRAVEL
  WORK
  HOBBIES
  FOOD
  FAMILY
  SHOPPING
  CULTURE
  BUSINESS
  CURRENT_EVENTS
}
